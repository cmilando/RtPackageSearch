geom_hline(yintercept = 1, linetype = '11') +
# ##
geom_ribbon(aes(x = date,
ymin = Rt_lb, ymax = Rt_ub,
fill = model),
alpha = 0.25) +
geom_line(aes(x = date, y = Rt, color = model),
linewidth = 0.25, show.legend = T) +
geom_point(aes(x = date, y = Rt, color = model),
size = 0.5,shape = 1,
show.legend = T) +
scale_color_discrete(name = 'Random walk') +
scale_fill_discrete(name = 'Random walk') +
##
coord_cartesian(xlim = c(first_day,
forecast_window),
ylim = c(0, rt_max+0.15), expand = F) +
ylab(expression(R[t])) +
xlab(NULL) +
##
scale_x_date(breaks = '2 week',
date_minor_breaks = "1 weeks",
date_labels = "%b %d") +
##
annotate('text', x = first_day + 3,
color = 'blue',
y = rt_max, label = 'C.',
fontface= 'bold',
size = 5) +
annotate('text', x = first_day + 35,
y = rt_max, label = 'Historical period',
size = 2.5) +
annotate('text', x = nowcast_start + 6,
y = rt_max, label = 'Nowcasting', size = 2.5) +
annotate('text', x = last_day + 6,
y = rt_max, label = 'Forecasting', size = 2.5) +
##
geom_vline(xintercept = c(nowcast_start + 0.5,
last_day + 0.5),
linewidth = 1.25,
alpha = 0.5,
linetype = 'solid', color = 'white') +
geom_vline(xintercept = c(nowcast_start + 0.5),
linetype = '22') +
geom_vline(xintercept = c(
last_day + 0.5),
linetype = '41') +
annotate('label',
x = forecast_window - 14.5,
size = 2,
#label.size = 0,
color = 'black',
y = 2.2,
angle = 90,
label = 'PRESENT')
plot_rt1
# dev.size()
ggsave('img/RandomWalk.png', width = 6.5, height = 2)
saveRDS(plot_rt1, "img/RandomWalk.RDS")
# Fixed Sliding Windows
# install.packages('EpiEstim',
#                  repos = c('https://mrc-ide.r-universe.dev',
#                            'https://cloud.r-project.org'))
library(EpiEstim)
#
source('01_ReportsInfections.R')
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# MODEL R(t)
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
# EPIESTIM DOES NOT DO NOW-CASTING
# but here is where you would do it if it did
# THEN SET SLIDING WINDOW SIZE
estimation_window <- 2
t_start <- seq(2, nrow(reports_df) - estimation_window)
t_end <- t_start + estimation_window
setnames(reports_df, "N", "I")
reports_df$date_int <- 1:nrow(reports_df)
# THEN ESTIMATE R(t) USING SLIDING WINDOWS
getR <- EpiEstim::estimate_R(
incid = reports_df,
method = "non_parametric_si",
config = make_config(list(
si_distr = serial_interval_pmf,
t_start = t_start,
t_end = t_end
)),
backimputation_window = 15
)
# INCLUDE THE DECONVOLUTION
getR$R$date_int <- getR$R$t_end - seeding_time
#
EpiEstim_R <- getR$R[, c('t_start', 't_end', 'date_int', 'Median(R)',
'Quantile.0.05(R)', 'Quantile.0.95(R)')]
names(EpiEstim_R) <- c('t_start', 't_end', "date_int", "Rt", "Rt_lb", "Rt_ub")
EpiEstim_R$model <- '2 days'
EpiEstim_R$date_int <- as.integer(EpiEstim_R$date_int)
reports_df <- data.frame(reports_df)
EpiEstim_R <- merge(EpiEstim_R, reports_df[, c('date', 'date_int')])
EpiEstim_R_full <- EpiEstim_R
# Repeat again to get another estimate
estimation_window <- 9
t_start <- seq(2, nrow(reports_df) - estimation_window)
t_end <- t_start + estimation_window
getR <- EpiEstim::estimate_R(
incid = reports_df ,
method = "non_parametric_si",
config = make_config(list(
si_distr = serial_interval_pmf,
t_start = t_start,
t_end = t_end
)),
backimputation_window = 15
)
# INCLUDE DECONVOLUTION
getR$R$date_int <- getR$R$t_end - seeding_time
#
EpiEstim_R <- getR$R[, c('t_start', 't_end', 'date_int', 'Median(R)',
'Quantile.0.05(R)', 'Quantile.0.95(R)')]
names(EpiEstim_R) <- c('t_start', 't_end', "date_int", "Rt", "Rt_lb", "Rt_ub")
EpiEstim_R$model <- '9 days'
EpiEstim_R$date_int <- as.integer(EpiEstim_R$date_int)
EpiEstim_R <- merge(EpiEstim_R, reports_df[, c('date', 'date_int')])
EpiEstim_R_full <- rbind(EpiEstim_R, EpiEstim_R_full)
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# PLOT R(t)
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
rt_max <- 3
first_day <- min(reports_df$date)
last_day <- max(reports_df$date)
nowcast_start    = last_day - seeding_time
forecast_window  = last_day + 15
plot_rt1 <- ggplot(EpiEstim_R_full) +
##
theme_classic2() +
geom_hline(yintercept = 1, linetype = '11') +
# ##
geom_ribbon(aes(x = date,
ymin = Rt_lb, ymax = Rt_ub,
fill = model),
alpha = 0.25) +
geom_line(aes(x = date, y = Rt, color = model),
linewidth = 0.25, show.legend = T) +
geom_point(aes(x = date, y = Rt, color = model),
size = 0.5,shape = 1,
show.legend = T) +
scale_color_discrete(name = 'Sliding window') +
scale_fill_discrete(name = 'Sliding window') +
##
coord_cartesian(xlim = c(first_day,
forecast_window),
ylim = c(0, rt_max+0.15), expand = F) +
ylab(expression(R[t])) +
xlab(NULL) +
##
scale_x_date(breaks = '2 week',
date_minor_breaks = "1 weeks",
date_labels = "%b %d") +
##
annotate('text', x = first_day + 3,
color = 'blue',
y = rt_max, label = 'B.',
fontface= 'bold',
size = 5) +
annotate('text', x = first_day + 35,
y = rt_max, label = 'Historical period',
size = 2.25) +
annotate('text', x = nowcast_start + 6,
y = rt_max, label = 'Nowcasting', size = 2.25) +
annotate('text', x = last_day + 6,
y = rt_max, label = 'Forecasting', size = 2.25) +
##
geom_vline(xintercept = c(nowcast_start + 0.5,
last_day + 0.5),
linewidth = 1.25,
alpha = 0.5,
linetype = 'solid', color = 'white') +
geom_vline(xintercept = c(nowcast_start + 0.5),
linetype = '22') +
geom_vline(xintercept = c(
last_day + 0.5),
linetype = '41') +
annotate('label',
x = forecast_window - 14.5,
size = 2,
#label.size = 0,
color = 'black',
y = 2.2,
angle = 90,
label = 'PRESENT')
plot_rt1
ggsave('img/FixedSlidingWindow.png', width = 6.5, height = 1.5)
saveRDS(plot_rt1, "img/FixedSlidingWindow.RDS")
library(patchwork)
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank())
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank())
pC <- readRDS("img/RandomWalk.RDS")
pA / pB / pC
ggsave('img/Fig3.png', width = 6.5, height = 1.5 * 2)
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8)))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank())
pC <- readRDS("img/RandomWalk.RDS")
pA / pB / pC
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
alpha = 0.2))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank())
pC <- readRDS("img/RandomWalk.RDS")
pA / pB / pC
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
alpha = 0.8))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank())
pC <- readRDS("img/RandomWalk.RDS")
pA / pB / pC
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
alpha = 0.9,
linewidth = 0.2))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank())
pC <- readRDS("img/RandomWalk.RDS")
pA / pB / pC
ggsave('img/Fig3.png', width = 6.5, height = 1.5 * 2)
ggsave('img/Fig3.png', width = 6.5, height = 1.5 * 3)
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
alpha = 0.1,
linewidth = 0.2))
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
alpha = 0.1,
linewidth = 0.2))
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
linewidth = 0.2))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank())
pC <- readRDS("img/RandomWalk.RDS")
pA / pB / pC
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
linewidth = 0.1))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank())
pC <- readRDS("img/RandomWalk.RDS")
pA / pB / pC
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
linewidth = 0.1))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.8),
linewidth = 0.1))
pC <- readRDS("img/RandomWalk.RDS") +
theme(
panel.grid.major = element_line(color = grey(0.8),
linewidth = 0.1))
pA / pB / pC
ggsave('img/Fig3.png', width = 6.5, height = 1.5 * 3)
library(patchwork)
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pC <- readRDS("img/RandomWalk.RDS") +
theme(
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pA / pB / pC
ggsave('img/Fig3.png', width = 6.5, height = 1.5 * 3)
plot_rt1 <- ggplot(R_df_all) +
##
theme_classic2() +
geom_hline(yintercept = 1, linetype = '11') +
# ##
geom_ribbon(aes(x = date,
ymin = Rt_lb, ymax = Rt_ub,
fill = model),
alpha = 0.25) +
geom_line(aes(x = date, y = Rt, color = model),
linewidth = 0.25, show.legend = T) +
geom_point(aes(x = date, y = Rt, color = model),
size = 0.5,shape = 1,
show.legend = T) +
scale_color_discrete(name = 'Random walk') +
scale_fill_discrete(name = 'Random walk') +
##
coord_cartesian(xlim = c(first_day,
forecast_window),
ylim = c(0, rt_max+0.15), expand = F) +
ylab(expression(R[t])) +
xlab(NULL) +
##
scale_x_date(breaks = '2 week',
date_minor_breaks = "1 weeks",
date_labels = "%b %d") +
##
annotate('text', x = first_day + 3,
color = 'blue',
y = rt_max, label = 'C.',
fontface= 'bold',
size = 5) +
annotate('text', x = first_day + 35,
y = rt_max, label = 'Historical period',
size = 2) +
annotate('text', x = nowcast_start + 6,
y = rt_max, label = 'Nowcasting', size = 2) +
annotate('text', x = last_day + 6,
y = rt_max, label = 'Forecasting', size = 2) +
##
geom_vline(xintercept = c(nowcast_start + 0.5,
last_day + 0.5),
linewidth = 1.25,
alpha = 0.5,
linetype = 'solid', color = 'white') +
geom_vline(xintercept = c(nowcast_start + 0.5),
linetype = '22') +
geom_vline(xintercept = c(
last_day + 0.5),
linetype = '41') +
annotate('label',
x = forecast_window - 14.5,
size = 2,
#label.size = 0,
color = 'black',
y = 2.2,
angle = 90,
label = 'PRESENT')
plot_rt1
# dev.size()
ggsave('img/RandomWalk.png', width = 6.5, height = 2)
saveRDS(plot_rt1, "img/RandomWalk.RDS")
# Fixed Sliding Windows
# install.packages('EpiEstim',
#                  repos = c('https://mrc-ide.r-universe.dev',
#                            'https://cloud.r-project.org'))
library(EpiEstim)
#
source('01_ReportsInfections.R')
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# MODEL R(t)
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
# EPIESTIM DOES NOT DO NOW-CASTING
# but here is where you would do it if it did
# THEN SET SLIDING WINDOW SIZE
estimation_window <- 2
t_start <- seq(2, nrow(reports_df) - estimation_window)
t_end <- t_start + estimation_window
setnames(reports_df, "N", "I")
reports_df$date_int <- 1:nrow(reports_df)
# THEN ESTIMATE R(t) USING SLIDING WINDOWS
getR <- EpiEstim::estimate_R(
incid = reports_df,
method = "non_parametric_si",
config = make_config(list(
si_distr = serial_interval_pmf,
t_start = t_start,
t_end = t_end
)),
backimputation_window = 15
)
# INCLUDE THE DECONVOLUTION
getR$R$date_int <- getR$R$t_end - seeding_time
#
EpiEstim_R <- getR$R[, c('t_start', 't_end', 'date_int', 'Median(R)',
'Quantile.0.05(R)', 'Quantile.0.95(R)')]
names(EpiEstim_R) <- c('t_start', 't_end', "date_int", "Rt", "Rt_lb", "Rt_ub")
EpiEstim_R$model <- '2 days'
EpiEstim_R$date_int <- as.integer(EpiEstim_R$date_int)
reports_df <- data.frame(reports_df)
EpiEstim_R <- merge(EpiEstim_R, reports_df[, c('date', 'date_int')])
EpiEstim_R_full <- EpiEstim_R
# Repeat again to get another estimate
estimation_window <- 9
t_start <- seq(2, nrow(reports_df) - estimation_window)
t_end <- t_start + estimation_window
getR <- EpiEstim::estimate_R(
incid = reports_df ,
method = "non_parametric_si",
config = make_config(list(
si_distr = serial_interval_pmf,
t_start = t_start,
t_end = t_end
)),
backimputation_window = 15
)
# INCLUDE DECONVOLUTION
getR$R$date_int <- getR$R$t_end - seeding_time
#
EpiEstim_R <- getR$R[, c('t_start', 't_end', 'date_int', 'Median(R)',
'Quantile.0.05(R)', 'Quantile.0.95(R)')]
names(EpiEstim_R) <- c('t_start', 't_end', "date_int", "Rt", "Rt_lb", "Rt_ub")
EpiEstim_R$model <- '9 days'
EpiEstim_R$date_int <- as.integer(EpiEstim_R$date_int)
EpiEstim_R <- merge(EpiEstim_R, reports_df[, c('date', 'date_int')])
EpiEstim_R_full <- rbind(EpiEstim_R, EpiEstim_R_full)
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# PLOT R(t)
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
rt_max <- 3
first_day <- min(reports_df$date)
last_day <- max(reports_df$date)
nowcast_start    = last_day - seeding_time
forecast_window  = last_day + 15
plot_rt1 <- ggplot(EpiEstim_R_full) +
##
theme_classic2() +
geom_hline(yintercept = 1, linetype = '11') +
# ##
geom_ribbon(aes(x = date,
ymin = Rt_lb, ymax = Rt_ub,
fill = model),
alpha = 0.25) +
geom_line(aes(x = date, y = Rt, color = model),
linewidth = 0.25, show.legend = T) +
geom_point(aes(x = date, y = Rt, color = model),
size = 0.5,shape = 1,
show.legend = T) +
scale_color_discrete(name = 'Sliding window') +
scale_fill_discrete(name = 'Sliding window') +
##
coord_cartesian(xlim = c(first_day,
forecast_window),
ylim = c(0, rt_max+0.15), expand = F) +
ylab(expression(R[t])) +
xlab(NULL) +
##
scale_x_date(breaks = '2 week',
date_minor_breaks = "1 weeks",
date_labels = "%b %d") +
##
annotate('text', x = first_day + 3,
color = 'blue',
y = rt_max, label = 'B.',
fontface= 'bold',
size = 5) +
annotate('text', x = first_day + 35,
y = rt_max, label = 'Historical period',
size = 2) +
annotate('text', x = nowcast_start + 6,
y = rt_max, label = 'Nowcasting', size = 2) +
annotate('text', x = last_day + 6,
y = rt_max, label = 'Forecasting', size = 2) +
##
geom_vline(xintercept = c(nowcast_start + 0.5,
last_day + 0.5),
linewidth = 1.25,
alpha = 0.5,
linetype = 'solid', color = 'white') +
geom_vline(xintercept = c(nowcast_start + 0.5),
linetype = '22') +
geom_vline(xintercept = c(
last_day + 0.5),
linetype = '41') +
annotate('label',
x = forecast_window - 14.5,
size = 2,
#label.size = 0,
color = 'black',
y = 2.2,
angle = 90,
label = 'PRESENT')
plot_rt1
ggsave('img/FixedSlidingWindow.png', width = 6.5, height = 1.5)
saveRDS(plot_rt1, "img/FixedSlidingWindow.RDS")
library(patchwork)
pA <- readRDS("img/Infections.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
theme(axis.text.x = element_blank(),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pC <- readRDS("img/RandomWalk.RDS") +
theme(
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pA / pB / pC
ggsave('img/Fig3.png', width = 6.5, height = 1.5 * 3)
dev.size()
##
ggsave('img/Fig3.png', width = 10.4, height = 6.1)
##
ggsave('img/Fig3.png', width = 8, height = 5)
