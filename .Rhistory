shape_onset_to_report = 2.7
scale_onset_to_report = 1.6
onset_to_report <- list(name="gamma",
shape = shape_onset_to_report,
scale = scale_onset_to_report)
shape_incubation = 3.2
scale_incubation = 1.3
incubation <- list(name="gamma",
shape = shape_incubation,
scale = scale_incubation)
mean_serial_interval = 4.8
std_serial_interval = 2.3
estimation_window = 3
N_bootstrap_replicates <- 100
estimates <- get_block_bootstrapped_estimate(
reports_df$N,
N_bootstrap_replicates = N_bootstrap_replicates,
smoothing_method = "LOESS",
deconvolution_method = "Richardson-Lucy delay distribution",
estimation_method = "EpiEstim sliding window",
uncertainty_summary_method = "original estimate - CI from bootstrap estimates",
combine_bootstrap_and_estimation_uncertainties = TRUE,
delay = list(incubation, onset_to_report),
estimation_window = estimation_window,
mean_serial_interval = mean_serial_interval,
std_serial_interval  = std_serial_interval,
output_Re_only = FALSE,
ref_date = reports_df$date[1],
time_step = "day"
)
#
estimateR_R <- estimates
estimateR_R$Rt <- estimateR_R$mean
estimateR_R$Rt_lb <- estimateR_R$lwr
#
estimateR_R <- estimates
estimateR_R$Rt <- estimateR_R$Re_estimate
estimateR_R$Rt_lb <- estimateR_R$Re_lowHPD
estimateR_R$Rt_ub <- estimateR_R$Re_highHPD
estimateR_R$model <- 'Standard'
rt_max <- 3
first_day <- min(reports_df$date)
last_day <- max(reports_df$date)
nowcast_start    = last_day - seeding_time
forecast_window  = last_day + 15
plot_rt1 <- ggplot(estimateR_R) +
##
theme_classic2() +
# ##
annotate('rect',
xmin = as.Date('2020-03-13') - 0.5,
xmax = as.Date('2020-03-25') + 0.5,
ymin = -Inf, ymax = Inf,
fill = 'lightyellow',
alpha = 0.75,
color = 'white') +
annotate('rect',
xmin = as.Date('2020-04-16') - 0.5,
xmax = as.Date('2020-04-23') + 0.5,
ymin = -Inf, ymax = Inf,
fill = 'lightyellow',
alpha = 0.75,
color = 'white') +
#
geom_hline(yintercept = 1, linetype = '11') +
# ##
geom_ribbon(aes(x = date,
ymin = Rt_lb, ymax = Rt_ub,
fill = model),
alpha = 0.25) +
geom_line(aes(x = date, y = Rt, color = model),
linewidth = 0.25, show.legend = T) +
geom_point(aes(x = date, y = Rt, color = model),
size = 0.5,shape = 1,
show.legend = T) +
scale_color_discrete(name = 'estimateR') +
scale_fill_discrete(name = 'estimateR') +
##
coord_cartesian(xlim = c(first_day,
forecast_window),
ylim = c(0, rt_max+0.15), expand = F) +
ylab(expression(R[t])) +
xlab(NULL) +
##
scale_x_date(breaks = '2 week',
date_minor_breaks = "1 weeks",
date_labels = "%b %d") +
##
annotate('text', x = first_day + 55,
y = rt_max, label = 'Historical period',
size = 2) +
annotate('text', x = nowcast_start + 6,
y = rt_max, label = 'Nowcasting', size = 2) +
annotate('text', x = last_day + 6,
y = rt_max, label = 'Forecasting', size = 2) +
##
geom_vline(xintercept = c(nowcast_start + 0.5,
last_day + 0.5),
linewidth = 1.25,
alpha = 0.5,
linetype = 'solid', color = 'white') +
geom_vline(xintercept = c(nowcast_start + 0.5),
linetype = '22') +
geom_vline(xintercept = c(
last_day + 0.5),
linetype = '41') +
annotate('label',
x = forecast_window - 14.5,
size = 2,
#label.size = 0,
color = 'black',
y = 2.2,
angle = 90,
label = 'PRESENT')
plot_rt1
ggsave('img/estimateR.png', width = 6.5, height = 1.5)
saveRDS(plot_rt1, "img/estimateR.RDS")
library(patchwork)
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# RUN ALL
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
rm(list = ls()); gc();
source('01_ReportsInfections.R'); rm(list = ls()); gc();
source('02_FixedSlidingWindows.R')
pA <- readRDS("img/Infections.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
hjust = 0,
y = report_ymax,
label = 'A. Observed reports',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.key.spacing.y = unit(.1, 'cm'),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'B. EpiEstim',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pC <- readRDS("img/ern.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'C. ern',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pD <- readRDS("img/estimateR.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'D. EstimateR',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pE <- readRDS("img/EpiInvert.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'E. EpiInvert',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pA / pB / pC / pD / pE
##
ggsave('img/SFig1.png', width = 8, height = 6)
library(patchwork)
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# RUN ALL
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
rm(list = ls()); gc();
source('01_ReportsInfections.R'); rm(list = ls()); gc();
# source('02_FixedSlidingWindows.R'); rm(list = ls()); gc();
# source('03_RandomWalk.R'); rm(list = ls()); gc();
# source('04_Filtering.R'); rm(list = ls()); gc();
# source('05_BSplines.R'); rm(list = ls()); gc();
# source('06_GaussianProcess.R'); rm(list = ls()); gc();
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# PLOT R(t)
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
source('02_FixedSlidingWindows.R')
pA <- readRDS("img/Infections.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
hjust = 0,
y = report_ymax,
label = 'A. Observed reports',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.key.spacing.y = unit(.1, 'cm'),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'B. EpiEstim',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pC <- readRDS("img/ern.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'C. ern',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pD <- readRDS("img/estimateR.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'D. EstimateR',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pE <- readRDS("img/EpiInvert.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'E. EpiInvert',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pA / pB / pC / pD / pE
##
ggsave('img/SFig1.png', width = 8, height = 6.5)
library(tidyverse)
library(patchwork)
library(ggpubr)
library(greta)
library(greta.gp)
set.seed(123)
X1 <- matrix(seq(from = 0, to = 20, by = 1), ncol = 1)
X2 <- matrix(seq(from = min(X1), to = max(X1), length.out = 1000),
ncol = 1)
y1 <- matrix(sin(X1) + rnorm(length(X1), 0, 0.5), ncol= 1)
ggplot() + theme_classic2() +
geom_point(aes(x = X1, y = y1), size = 1) +
geom_line(aes(x = X2, y = sin(X2)),
color = 'blue', linetype = 'dashed')
# Exponentiated quadratic kernel
exponentiated_quadratic_kernel <- function(xa, xb,
amplitude = 0.5,
lengthscale = 0.5) {
# Ensure column vectors
xa <- as.matrix(xa)
xb <- as.matrix(xb)
# Compute squared distances
dists <- as.matrix(dist(rbind(xa, xb)))^2
n_a <- nrow(xa)
n_b <- nrow(xb)
sq_dists <- dists[1:n_a, (n_a + 1):(n_a + n_b)]
# Compute kernel
k <- amplitude^2 * exp(-0.5 * sq_dists / lengthscale^2)
return(k)
}
GP <- function(X1, y1, X2, kernel_func) {
# Calculate the posterior mean and covariance matrix for y2
# based on the corresponding input X2, the observations (y1, X1),
# and the prior kernel function.
# Kernel of the observations
Sigma11 <- kernel_func(X1, X1)
# Kernel of observations (x1) vs to-predict (x2)
Sigma12 <- kernel_func(X1, X2)
# Solve
solved <- t(solve(Sigma11, Sigma12))
# Compute Posterior mean
mu2 <- solved %*% y1
# Compute the posterior covariance
Sigma22 <- kernel_func(X2, X2)
Sigma2 <- Sigma22 - (solved %*% Sigma12)
# return mean and covariance
list(mean = mu2, covariance = Sigma2)
}
result <- GP(X1, y1, X2, exponentiated_quadratic_kernel)
mu2 <- result$mean
Sigma2 <- result$covariance
sigma2 <- sqrt(ifelse(diag(Sigma2)<0, 0, diag(Sigma2)))
get_y2 <- function(mu2, Sigma2, ny = 5) {
ny <- 5  # number of posterior samples
L <- chol(Sigma2 + diag(1e-8, nrow(Sigma2)))  # add small jitter for stability
y2_samples <- matrix(NA, nrow = ny, ncol = nrow(X2))
for (i in 1:ny) {
z <- rnorm(nrow(X2))
y2_samples[i, ] <- mu2 + t(L) %*% z
}
return(y2_samples)
}
y2_samples <- get_y2(mu2 = mu2, Sigma2 = Sigma2)
p0 <- ggplot() + theme_classic2() +
# geom_ribbon(aes(x = X2,
#                 ymin = mu2 - 2 * sigma2,
#                 ymax = mu2 + 2 * sigma2),
#             fill = adjustcolor("red", alpha.f = 0.15)) +
# geom_line(aes(x = X2, y = mu2), color = 'red') +
geom_line(aes(x = X2, y = sin(X2)), color = 'blue',
linetype = 'dashed') +
geom_point(aes(x = X1, y = y1), size = 1.5) + xlab("X") + ylab("Y") +
ggtitle("a.")
# --- First plot: Posterior mean and uncertainty
p1 <- ggplot() + theme_classic2() +
geom_ribbon(aes(x = X2,
ymin = mu2 - 2 * sigma2,
ymax = mu2 + 2 * sigma2),
fill = adjustcolor("red", alpha.f = 0.15)) +
geom_line(aes(x = X2, y = mu2), color = 'red') +
# geom_line(aes(x = X2, y = sin(X2)), color = 'blue',
#           linetype = 'dashed') +
geom_point(aes(x = X1, y = y1), size = 1.5) + xlab("X") + ylab("Y") +
ggtitle("c.")
# --- Second plot: Posterior samples
p2 <- ggplot() + theme_classic2() +
geom_line(aes(x = X2, y = y2_samples[1, ]), color = 'orange') +
geom_line(aes(x = X2, y = y2_samples[2, ]), color = 'orange') +
geom_line(aes(x = X2, y = y2_samples[3, ]), color = 'orange') +
geom_line(aes(x = X2, y = y2_samples[4, ]), color = 'orange') +
geom_line(aes(x = X2, y = y2_samples[5, ]), color = 'orange') +
geom_point(aes(x = X1, y = y1), size = 1.5) +
xlab("X") + ylab("Y") +  ggtitle("b.")
p0 / p2 / p1
# hyperparameters
rbf_var <- lognormal(0, 1)  #
rbf_len <- lognormal(0, 1)  #
obs_sd <- lognormal(0, 1)   #
# kernel & GP
kernel <- rbf(rbf_len, rbf_var) + bias(1)
f <- gp(X1, kernel)
# likelihood
distribution(y1) <- normal(f, obs_sd)
# prediction
f_plot <- project(f, X2)
# fit the model by Hamiltonian Monte Carlo
m <- model(f_plot)
draws <- mcmc(m, chains = 4, n_samples = 8000)
dim(draws[[1]])
greta_med = unname(apply(draws[[1]], 2, function(x) quantile(x, probs = 0.5)))
greta_lb  = unname(apply(draws[[1]], 2, function(x) quantile(x, probs = 0.025)))
greta_ub  = unname(apply(draws[[1]], 2, function(x) quantile(x, probs = 0.975)))
p3 <- ggplot() + theme_classic2() +
geom_ribbon(aes(x = X2, ymin = greta_lb, ymax = greta_ub),
fill = 'lavender', alpha = 0.5) +
geom_line(aes(x = X2, y = greta_med), color ='purple') +
geom_line(aes(x = X2, y = sin(X2)), color = 'blue',
linetype = 'dashed') +
geom_point(aes(x = X1, y = y1)) +
xlab("X") + ylab("Y")
p3
ggsave("gp_supp_fig2.png", width = 6, height = 2)
p0 / p2 / p1 / p3
ggsave("gp_supp_fig2.png", width = 6, height = 6)
ggsave("gp_supp_fig2.png", width = 8, height = 8)
p0 / p2 / p1 / p3
ggsave("gp_supp_fig2.png", width = 8, height = 8)
p3 <- ggplot() + theme_classic2() +
geom_ribbon(aes(x = X2, ymin = greta_lb, ymax = greta_ub),
fill = 'lavender', alpha = 0.5) +
geom_line(aes(x = X2, y = greta_med), color ='purple') +
geom_line(aes(x = X2, y = sin(X2)), color = 'blue',
linetype = 'dashed') +
geom_point(aes(x = X1, y = y1)) +
xlab("X") + ylab("Y") +
ggtitle("d.")
p0 / p2 / p1 / p3
ggsave("gp_supp_fig2.png", width = 8, height = 8)
library(patchwork)
# ////////////////////////////////////////////////////////////////////////////
# ----------------------------------------------------------------------------
# RUN ALL
# ----------------------------------------------------------------------------
# ////////////////////////////////////////////////////////////////////////////
rm(list = ls()); gc();
source('01_ReportsInfections.R'); rm(list = ls()); gc();
source('02_FixedSlidingWindows.R')
pA <- readRDS("img/Infections.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
hjust = 0,
y = report_ymax,
label = 'A. Observed reports',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
legend.key.spacing.y = unit(.1, 'cm'),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pB <- readRDS("img/FixedSlidingWindow.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'B. Sliding window (EpiEstim)',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pC <- readRDS("img/BSplines.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'C. P-splines (EpiLPS)',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pD <- readRDS("img/Filtering.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'D. Trend-filtering (RtEstim)',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pE <- readRDS("img/RandomWalk.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'E. Random walk (EpiNow2, epinowcast)',
fontface= 'bold',
size = 3) +
theme(axis.text.x = element_blank(),
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pF <- readRDS("img/GaussianProcess.RDS") +
annotate('text', x = first_day + 1,
color = 'blue',
y = rt_max,
hjust = 0,
label = 'F. Gaussian Process (EpiNow2)',
fontface= 'bold',
size = 3) +
theme(
legend.title = element_text(size = 8),
legend.text = element_text(size = 8),
panel.grid.major = element_line(color = grey(0.9),
linewidth = 0.1))
pA / pB / pC / pD / pE / pF
##
ggsave('img/Fig3.png', width = 8, height = 8)
